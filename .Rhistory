library(knitr)
# Chunk 3
source("1-clean_rejection_data.R")
# Chunk 4
source("2-clean_patient_data.R")
# Chunk 5
source("3-clean_samples_data.R")
# Chunk 6
source("4-clean_adverse_events_data.R")
# Chunk 7
source("5-clean_demographics.R")
# Chunk 8
source("6-clean_biopsy.R")
# Chunk 9
ls()
# Chunk 10
patients.clean %>%
filter(rejection == "no") %>%
distinct %>%
summarise(n = n()) %>% unlist
# Chunk 11
rejection.clean %>%
filter(organ == "kidney",
biopsy.results == "acute cellular") %>%
distinct(patient.id) %>%
summarise(n = n()) %>% unlist
# Chunk 12
rejection.clean %>%
filter(organ == "kidney",
!(biopsy.results %in% c("other", "negative")),
!is.na(biopsy.results)) %>%
select(patient.id) %>%
distinct %>%
summarise(n = n()) %>%
unlist
# Chunk 13
# split "acute cellular and vascular" rejection entry into two lines
kidney.patients.tmp <- rejection.clean %>%
filter(organ == "kidney")
kidney.patients.tmp$biopsy.results <- as.character(kidney.patients.tmp$biopsy.results)
# set long names to span multiple lines
kidney.patients.tmp$biopsy.results[kidney.patients.tmp$biopsy.results ==
"acute cellular and vascular"] <- "acute cellular\nand vascular"
kidney.patients.tmp$biopsy.results[kidney.patients.tmp$biopsy.results ==
"chronic and acute"] <- "chronic and\nacute"
# reorder the factor levels
kidney.patients.tmp$biopsy.results <- factor(kidney.patients.tmp$biopsy.results,
levels = c("acute cellular",
"other",
"acute cellular\nand vascular",
"chronic and\nacute",
"acute vascular",
"chronic",
"negative",
"recurrent hepatitis c"))
# plot the frequency of each type of rejection event
kidney.patients.tmp %>%
group_by(biopsy.results) %>%
summarise(n = n()) %>%
ggplot() +
geom_bar(aes(x = biopsy.results, y = n), stat = "identity") +
scale_x_discrete(name = "Biopsy result") +
scale_y_continuous(name = "Number of 'rejection' events") +
ggtitle("Number of rejection events by rejection type (based on biopsy result)") +
theme_classic()
# Chunk 14
non.rejection.id <- unique(filter(patients.clean, rejection == "no")$patient.id)
rejection.id <- unique(filter(rejection.clean,
organ == "kidney",
biopsy.results == "acute cellular")$patient.id)
# how many patients are common to both rejection and non-rejection list
sum(rejection.id %in% non.rejection.id)
# Chunk 15
patients.clean %>%
filter(patient.id %in% rejection.id, patient.id %in% non.rejection.id) %>%
select(patient.id, rejection, comments)
# Chunk 16
rejection.clean %>%
filter(patient.id %in% rejection.id, patient.id %in% non.rejection.id) %>%
select(patient.id, biopsy.results, comments) %>%
data.frame
# Chunk 17
# remove the overlap patients
rejection.id <- rejection.id[!(rejection.id %in% non.rejection.id)]
# remove the overlap patients
non.rejection.id <- non.rejection.id[!(non.rejection.id %in% rejection.id)]
# Chunk 18
# how many rejection patients appear in the adverse events database
adverse.events1.clean %>%
filter(patient.id %in% rejection.id) %>%
select(event.description.pt) %>%
table %>% sort %>% tail(6)
# how many non-rejection patients appear in the adverse events database
adverse.events1.clean %>%
filter(patient.id %in% non.rejection.id) %>%
select(event.description.pt) %>%
table %>% sort %>% tail(6)
# Chunk 19
patients.died <- adverse.events1.clean %>%
filter(patient.id %in% c(rejection.id, non.rejection.id)) %>%
# idenitfy the adverse events leading to death
filter(grepl("death", tolower(event.description.llt))) %>%
select(patient.id) %>%
unlist
length(patients.died)
# Chunk 20
rejection.patients.died <- adverse.events1.clean %>%
filter(patient.id %in% rejection.id) %>%
# idenitfy the adverse events leading to death
filter(grepl("death", tolower(event.description.llt)))
# Chunk 21
# idenitfy cause of death of first rejection patient
adverse.events2.clean %>%
filter(patient.id %in% rejection.patients.died$patient.id[1]) %>%
(function(x) {x[23,11]})
# Chunk 22
# idenitfy cause of death of first rejection patient
adverse.events2.clean %>%
filter(patient.id %in% rejection.patients.died$patient.id[2]) %>%
(function(x) {x[10,9]})
# Chunk 23
# idenitfy cause of death of first rejection patient
adverse.events2.clean %>%
filter(patient.id %in% rejection.patients.died$patient.id[3]) %>%
(function(x) {x[5,7]})
# Chunk 24
rejection.id <- rejection.id[!(rejection.id %in% patients.died)]
non.rejection.id <- non.rejection.id[!(non.rejection.id %in% patients.died)]
# Chunk 25
adverse.events1.clean %>%
filter(patient.id %in% c(rejection.id)) %>%
# idenitfy the adverse events leading to death
filter(grepl("graft failure", tolower(event.description.llt))) %>%
select(patient.id) %>%
unlist %>%
length
adverse.events1.clean %>%
filter(patient.id %in% c(rejection.id)) %>%
# idenitfy the adverse events leading to death
filter(grepl("renal failure", tolower(event.description.llt))) %>%
select(patient.id) %>%
unlist %>%
length
# Chunk 26
n.samples.available <- samples.clean %>%
# filter to the restricted patients
filter(patient.id %in% c(rejection.id, non.rejection.id)) %>%
# identify for which weeks the patient has samples
select(patient.id, date.drawn, week) %>%
distinct(patient.id, date.drawn, week) %>%
# calcualte how many samples in each specified time period
group_by(patient.id) %>%
summarise(total.samples = n(),
pre.transplant.samples = -sum(week <= 0),
post.transplant.first.6mo = sum((week > 0) & (week <= 26)),
post.transplant.after.6mo = sum(week > 26)) %>%
arrange(desc(total.samples))
head(samples.clean)
unique(samples.clean$material.type)
n.samples.available <- samples.clean %>%
# filter to the restricted patients
filter(patient.id %in% c(rejection.id, non.rejection.id),
material.type == "PBMC") %>%
# identify for which weeks the patient has samples
select(patient.id, date.drawn, week) %>%
distinct(patient.id, date.drawn, week) %>%
# calcualte how many samples in each specified time period
group_by(patient.id) %>%
summarise(total.samples = n(),
pre.transplant.samples = -sum(week <= 0),
post.transplant.first.6mo = sum((week > 0) & (week <= 26)),
post.transplant.after.6mo = sum(week > 26)) %>%
arrange(desc(total.samples))
samples.melt <- n.samples.available %>%
arrange(desc(total.samples)) %>%
mutate(id = 1:n()) %>%
melt(id.vars = c("id", "patient.id", "total.samples"))
samples.melt$variable <- factor(samples.melt$variable,
levels = levels(samples.melt$variable)[3:1])
ggplot(samples.melt) +
geom_bar(aes(x = id, y = value, fill = variable),
stat = "identity",
position = "stack",
col = "grey20") +
theme_bw() +
scale_x_continuous(name = "Patient") +
scale_y_continuous(name = "Number of sample time points\n(aggregating by week)", breaks = c(-3, -1, seq(1, 15, 2))) +
geom_hline(yintercept = 0, col = "darkred") +
scale_fill_manual(values = c(RColorBrewer::brewer.pal(9, "Blues")[c(7, 4, 1)]),
name = "") +
ggtitle("Number of samples available per patient") +
theme(legend.position = "top", legend.justification = "left",
axis.text = element_text(size = 24),
axis.title = element_text(size = 24),
legend.text = element_text(size = 16),
title = element_text(size = 24))
samplesAvailable <- function(material = c("PBMC", "PLASMA", "WHOLE BL", "SERUM")) {
samples <- samples.clean %>%
# filter to the restricted patients
filter(patient.id %in% c(rejection.id, non.rejection.id),
material.type == material) %>%
# identify for which weeks the patient has samples
select(patient.id, date.drawn, week) %>%
distinct(patient.id, date.drawn, week) %>%
# calcualte how many samples in each specified time period
group_by(patient.id) %>%
summarise(total.samples = n(),
pre.transplant.samples = -sum(week <= 0),
post.transplant.first.6mo = sum((week > 0) & (week <= 26)),
post.transplant.after.6mo = sum(week > 26)) %>%
arrange(desc(total.samples))
return(samples)
}
samplesAvailable <- function(material = c("PBMC", "PLASMA", "WHOLE BL", "SERUM")) {
samples <- samples.clean %>%
# filter to the restricted patients
filter(patient.id %in% c(rejection.id, non.rejection.id),
material.type == material) %>%
# identify for which weeks the patient has samples
select(patient.id, date.drawn, week) %>%
distinct(patient.id, date.drawn, week) %>%
# calcualte how many samples in each specified time period
group_by(patient.id) %>%
summarise(total.samples = n(),
pre.transplant.samples = -sum(week <= 0),
post.transplant.first.6mo = sum((week > 0) & (week <= 26)),
post.transplant.after.6mo = sum(week > 26)) %>%
arrange(desc(total.samples))
# melt to long form
samples.melt <- n.samples.available %>%
arrange(desc(total.samples)) %>%
mutate(id = 1:n()) %>%
melt(id.vars = c("id", "patient.id", "total.samples"))
# set order of factor levels
samples.melt$variable <- factor(samples.melt$variable,
levels = levels(samples.melt$variable)[3:1])
return(samples.melt)
}
pbmc.samples <- samplesAvailable("PBMC")
pbmc.samples <- samplesAvailable("PBMC")
generateSamplesPlot(pbmc.samples)
generateSamplesPlot <- function(samples.melt) {
ggplot(samples.melt) +
geom_bar(aes(x = id, y = value, fill = variable),
stat = "identity",
position = "stack",
col = "grey20") +
theme_bw() +
scale_x_continuous(name = "Patient") +
scale_y_continuous(name = "Number of sample time points\n(aggregating by week)",
breaks = c(-3, -1, seq(1, 15, 2))) +
geom_hline(yintercept = 0, col = "darkred") +
scale_fill_manual(values = c(RColorBrewer::brewer.pal(9, "Blues")[c(7, 4, 1)]),
name = "") +
ggtitle("Number of samples available per patient") +
theme(legend.position = "top", legend.justification = "left",
axis.text = element_text(size = 24),
axis.title = element_text(size = 24),
legend.text = element_text(size = 16),
title = element_text(size = 24))
}
generateSamplesPlot(pbmc.samples)
samplesAvailable <- function(material = c("PBMC", "PLASMA", "WHOLE BL", "SERUM")) {
samples <- samples.clean %>%
# filter to the restricted patients
filter(patient.id %in% c(rejection.id, non.rejection.id),
material.type == material) %>%
# identify for which weeks the patient has samples
select(patient.id, date.drawn, week) %>%
distinct(patient.id, date.drawn, week) %>%
# calcualte how many samples in each specified time period
group_by(patient.id) %>%
summarise(total.samples = n(),
pre.transplant.samples = -sum(week <= 0),
post.transplant.first.6mo = sum((week > 0) & (week <= 26)),
post.transplant.after.6mo = sum(week > 26)) %>%
arrange(desc(total.samples))
# melt to long form
samples.melt <- n.samples.available %>%
arrange(desc(total.samples)) %>%
mutate(id = 1:n()) %>%
melt(id.vars = c("id", "patient.id", "total.samples"))
# set order of factor levels
samples.melt$variable <- factor(samples.melt$variable,
levels = levels(samples.melt$variable)[3:1])
return(samples.melt)
}
generateSamplesPlot <- function(material = c("PBMC", "PLASMA", "WHOLE BL", "SERUM")) {
material = match.arg(material)
samples.melt <- samplesAvailable(material)
ggplot(samples.melt) +
geom_bar(aes(x = id, y = value, fill = variable),
stat = "identity",
position = "stack",
col = "grey20") +
theme_bw() +
scale_x_continuous(name = "Patient") +
scale_y_continuous(name = "Number of sample time points\n(aggregating by week)",
breaks = c(-3, -1, seq(1, 15, 2))) +
geom_hline(yintercept = 0, col = "darkred") +
scale_fill_manual(values = c(RColorBrewer::brewer.pal(9, "Blues")[c(7, 4, 1)]),
name = "") +
ggtitle(paste("Number of", material, "samples available per patient")) +
theme(legend.position = "top", legend.justification = "left",
axis.text = element_text(size = 24),
axis.title = element_text(size = 24),
legend.text = element_text(size = 16),
title = element_text(size = 24))
}
generateSamplesPlot("PBMC")
generateSamplesPlot("WHOLE Bl")
generateSamplesPlot("WHOLE BL")
generateSamplesPlot <- function(material = c("PBMC", "PLASMA", "WHOLE BL", "SERUM")) {
material = match.arg(material)
print(material)
samples.melt <- samplesAvailable(material)
ggplot(samples.melt) +
geom_bar(aes(x = id, y = value, fill = variable),
stat = "identity",
position = "stack",
col = "grey20") +
theme_bw() +
scale_x_continuous(name = "Patient") +
scale_y_continuous(name = "Number of sample time points\n(aggregating by week)",
breaks = c(-3, -1, seq(1, 15, 2))) +
geom_hline(yintercept = 0, col = "darkred") +
scale_fill_manual(values = c(RColorBrewer::brewer.pal(9, "Blues")[c(7, 4, 1)]),
name = "") +
ggtitle(paste("Number of", material, "samples available per patient")) +
theme(legend.position = "top", legend.justification = "left",
axis.text = element_text(size = 24),
axis.title = element_text(size = 24),
legend.text = element_text(size = 16),
title = element_text(size = 24))
}
generateSamplesPlot("PBMC")
generateSamplesPlot("WHOLE BL")
generateSamplesPlot("PLASMA")
samplesAvailable <- function(material = c("PBMC", "PLASMA", "WHOLE BL", "SERUM")) {
samples <- samples.clean %>%
# filter to the restricted patients
filter(patient.id %in% c(rejection.id, non.rejection.id),
material.type == material) %>%
# identify for which weeks the patient has samples
select(patient.id, date.drawn, week) %>%
distinct(patient.id, date.drawn, week) %>%
# calcualte how many samples in each specified time period
group_by(patient.id) %>%
summarise(total.samples = n(),
pre.transplant.samples = -sum(week <= 0),
post.transplant.first.6mo = sum((week > 0) & (week <= 26)),
post.transplant.after.6mo = sum(week > 26)) %>%
arrange(desc(total.samples))
# melt to long form
samples.melt <- samples %>%
arrange(desc(total.samples)) %>%
mutate(id = 1:n()) %>%
melt(id.vars = c("id", "patient.id", "total.samples"))
# set order of factor levels
samples.melt$variable <- factor(samples.melt$variable,
levels = levels(samples.melt$variable)[3:1])
return(samples.melt)
}
generateSamplesPlot <- function(material = c("PBMC", "PLASMA", "WHOLE BL", "SERUM")) {
material = match.arg(material)
samples.melt <- samplesAvailable(material)
ggplot(samples.melt) +
geom_bar(aes(x = id, y = value, fill = variable),
stat = "identity",
position = "stack",
col = "grey20") +
theme_bw() +
scale_x_continuous(name = "Patient") +
scale_y_continuous(name = "Number of sample time points\n(aggregating by week)",
breaks = c(-3, -1, seq(1, 15, 2))) +
geom_hline(yintercept = 0, col = "darkred") +
scale_fill_manual(values = c(RColorBrewer::brewer.pal(9, "Blues")[c(7, 4, 1)]),
name = "") +
ggtitle(paste("Number of", material, "samples available per patient")) +
theme(legend.position = "top", legend.justification = "left",
axis.text = element_text(size = 24),
axis.title = element_text(size = 24),
legend.text = element_text(size = 16),
title = element_text(size = 24))
}
generateSamplesPlot("PBMC")
generateSamplesPlot("WHOLE BL")
generateSamplesPlot("PLASMA")
generateSamplesPlot("SERUM")
grid.arrange(generateSamplesPlot("PBMC"),
generateSamplesPlot("WHOLE BL"),
generateSamplesPlot("PLASMA"),
generateSamplesPlot("SERUM"),
ncol = 2)
gridExtra::grid.arrange(generateSamplesPlot("PBMC"),
generateSamplesPlot("WHOLE BL"),
generateSamplesPlot("PLASMA"),
generateSamplesPlot("SERUM"),
ncol = 2)
ggplot(samples.melt) +
geom_bar(aes(x = id, y = value, fill = variable),
stat = "identity",
position = "stack",
col = "grey20") +
theme_bw() +
scale_x_continuous(name = "Patient") +
scale_y_continuous(name = "Number of sample time points\n(aggregating by week)",
breaks = c(-3, -1, seq(1, 15, 2))) +
geom_hline(yintercept = 0, col = "darkred") +
scale_fill_manual(values = c(RColorBrewer::brewer.pal(9, "Blues")[c(7, 4, 1)]),
name = "") +
ggtitle(paste("Number of", material, "samples available per patient")) +
theme(legend.position = "top", legend.justification = "left",
axis.text = element_text(size = (24 * text.size)),
axis.title = element_text(size = (24 * text.size)),
legend.text = element_text(size = (16 * text.size)),
title = element_text(size = (24 * text.size)))
generateSamplesPlot <- function(material = c("PBMC", "PLASMA",
"WHOLE BL", "SERUM"),
text.size = 1) {
material = match.arg(material)
samples.melt <- samplesAvailable(material)
ggplot(samples.melt) +
geom_bar(aes(x = id, y = value, fill = variable),
stat = "identity",
position = "stack",
col = "grey20") +
theme_bw() +
scale_x_continuous(name = "Patient") +
scale_y_continuous(name = "Number of sample time points\n(aggregating by week)",
breaks = c(-3, -1, seq(1, 15, 2))) +
geom_hline(yintercept = 0, col = "darkred") +
scale_fill_manual(values = c(RColorBrewer::brewer.pal(9, "Blues")[c(7, 4, 1)]),
name = "") +
ggtitle(paste("Number of", material, "samples available per patient")) +
theme(legend.position = "top", legend.justification = "left",
axis.text = element_text(size = (24 * text.size)),
axis.title = element_text(size = (24 * text.size)),
legend.text = element_text(size = (16 * text.size)),
title = element_text(size = (24 * text.size)))
}
generateSamplesPlot("PBMC", text.size = 0.5)
?filter
devtools::install_github('rstudio/blogdown')
blogdown::install_hugo()
setwd("~/Google Drive/Personal webpage/hugo")
getwd()
blogdown::new_site()
library(blogdown)
blogdown::new_site()
fetch_yaml = bookdown:::fetch_yaml
fetch_yaml = bookdown:::fetch_yaml()
blogdown::serve_site()
blogdown::install_hugo()
blogdown::new_site()
blogdown::serve_site()
??clean_empty_dir
librayr(bookdown)
library(bookdown)
??clean_empty_dir
devtools::install_github('rstudio/bookdown')
blogdown::new_site()
blogdown::new_site()
blogdown::serve_site()
blogdown::install_theme("jpescador/hugo-future-imperfect")
blogdown::serve_site()
blogdown::install_theme("hugo-lithium-theme")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
setwd("~/Google Drive/Personal webpage/hugo/content/blog")
setwd("~/Google Drive/Personal webpage/hugo2")
blogdown::new_site()
blogdown::install_theme("jpescador/hugo-future-imperfect")
blogdown::serve_site()
setwd("~/Google Drive/Personal webpage/hugo/content/blog")
setwd("~/Google Drive/Personal webpage/hugo")
blogdown::serve_site()
setwd("~/Google Drive/Personal webpage/hugo2")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
pwd()
getwd()
setwd("~/Google Drive/Personal webpage/rlbarter.github.io")
new_site()
install_theme("jpescador/hugo-future-imperfect")
new_site()
install_theme("jpescador/hugo-future-imperfect")
serve_site()
setwd("~/Google Drive/Personal webpage/rlbarter.github.io/content/post")
setwd("~/Google Drive/Personal webpage/rlbarter.github.io")
serve_site()
serve_site()
??blogdown
??blogdown
serve_site()
setwd("~/Google Drive/Personal webpage/rlbarter.github.io")
new_site()
serve_site()
getwd()
setwd("~/Google Drive/Personal webpage/rlbarter.github.io")
serve_site()
serve_site()
serve_site()
serve_site()
serve_site()
