"total.kidney.pancreas.donors",
"total.small.bowel.donors")
# clean the organs dataset
organs.clean <- organs.original
colnames(organs.clean) <- clean.colnames
# Chunk 4: population-numeric
# convert population to numeric
organs.clean$population <- as.numeric(as.character(organs.clean$population))
# Chunk 5: data-structure
knitr::include_graphics("Figures/organ_variables.png")
# Chunk 6
countries.no.data <- organs.clean %>% group_by(country) %>%
# identify how many missing values are recorded for each country in the summary columns
summarise(region = unique(region),
n = n(),
missing.deceased = sum(is.na(total.deceased.donors)),
missing.brain.dead = sum(is.na(brain.dead.donors)),
missing.circulatory.death = sum(is.na(circulatory.death.donors))) %>%
# identify countries that have completely missing data
mutate(no.data = ((missing.deceased == 15) &
(missing.brain.dead == 15) &
(missing.circulatory.death == 15))) %>%
# filter to countries with no recorded data
filter(no.data)
# how many countries have missing data
length(unique(countries.no.data$country))
# Chunk 7
# remove the missing data countries from the data table
organs.clean <- organs.clean %>%
filter(!(country %in% countries.no.data$country))
# Chunk 8
# total donor counts
donor.totals <- organs.clean %>%
select(region, country, year, population,
count = total.deceased.donors)
# look at the first 6 rows
kable(head(donor.totals))
# Chunk 9
# add a count-by-population variable
donor.totals <- donor.totals %>%
mutate(count.by.pop = count / population)
# Chunk 10
# filter to only deceased donors from 2006 to 2014
total.organs <- donor.totals %>%
filter(year > 2005,
year < 2015)
# identify countries with more than one missing value
few.missing.country <- total.organs %>%
group_by(country) %>%
# is there more than 1 year with missing data?
summarise(missing = sum(is.na(count.by.pop)) > 1) %>%
# remove these countries for which there is more than 1 year missing
filter(!missing) %>%
# isolte the unfiltered countries
select(country) %>%
unlist %>% as.character
# remove countries with more than 1 missing value
total.organs <- total.organs %>%
filter(country %in% few.missing.country)
# cast to year by country matrix
donor.matrix <- acast(total.organs,
country ~ year,
value.var = "count.by.pop")
# view the first 6 rows and columns
kable(head(donor.matrix[, 1:6]))
# Chunk 11
# read in gdp data
hdi <- read.csv("raw_data/hdi.csv", header = F)
# Chunk 12
# the column names are stored in the second row
colnames(hdi) <- (hdi[2,])
# remove the first two rows
hdi <- hdi[3:nrow(hdi),]
# change column names 1 and 2
colnames(hdi)[1:2] <- c("rank", "country")
# melt to long form
hdi <- melt(hdi, id.vars = c("country", "rank"))
# change column names
colnames(hdi) <- c("country", "rank", "year", "hdi")
# rearrange order of columns
hdi <- hdi %>% dplyr::select(country, year, rank, hdi)
# remove blank space after country name
hdi$country <- gsub(" ", "", as.character(hdi$country))
hdi$rank <- as.numeric(as.character(hdi$rank))
# Chunk 13
# which countries in donor.matrix are not in gdp?
rownames(donor.matrix)[!(rownames(donor.matrix) %in% unique(hdi$country))]
# to find column names: unique(hdi$country)[grep("Venez", unique(hdi$country))]
# change country names accordingly
hdi[hdi$country == "CzechRepublic", "country"] <- "Czech Republic"
hdi[hdi$country == "DominicanRepublic", "country"] <- "Dominican Republic"
hdi[hdi$country == "Iran(IslamicRepublicof)", "country"] <- "Iran (Islamic Republic of)"
hdi[hdi$country == "NewZealand", "country"] <- "New Zealand"
hdi[hdi$country == "Korea(Republicof)", "country"] <- "Republic of Korea"
hdi[hdi$country == "SaudiArabia", "country"] <- "Saudi Arabia"
hdi[hdi$country == "SouthAfrica", "country"] <- "South Africa"
hdi[hdi$country == "UnitedKingdom", "country"] <- "United Kingdom"
hdi[hdi$country == "UnitedStates", "country"] <- "United States of America"
hdi[hdi$country == "Venezuela(BolivarianRepublicof)", "country"] <- "Venezuela (Bolivarian Republic of)"
# Chunk 14
hdi.match <- left_join(data.frame(country = rownames(donor.matrix)),
hdi,
by = "country")
# filter to 2014 hdi
hdi.match.2014 <- hdi.match %>% filter(year == 2014)
# Chunk 15
# organ donations by year (aggregated across countries)
organs.by.year <- total.organs %>%
group_by(year) %>%
summarise(total = sum(count, na.rm = TRUE)) %>%
select(total) %>%
unlist
# Chunk 16
# order countries by number of transplants averaged over years
organs.by.country = total.organs %>%
group_by(country) %>%
summarise(total = mean(count / population, na.rm = TRUE) * 100000)
# do a left join to make sure that the countries are in the correct order
organs.by.country <- left_join(data.frame(country = rownames(donor.matrix)),
organs.by.country,
by = "country")
organs.by.country <- organs.by.country$total
# Chunk 17
# idenitfy the region of each country
country.region <- total.organs %>%
filter(country %in% rownames(donor.matrix)) %>%
select(region, country) %>%
distinct(region, country) %>%
arrange(country)
# define a color for each region
region.col <- factor(country.region$region)
levels(region.col) <- c("#e6f5c9", "#fdcdac", "#cbd5e8",
"#b3e2cd", "#f4cae4", "#fff2ae")
region.col.dark <- region.col
levels(region.col.dark) <- c("#a6d854", "#fc8d62", "#8da0cb",
"#66c2a5", "#e78ac3", "#ffd92f")
region.col <- as.character(region.col)
region.col.dark <- as.character(region.col.dark)
# Chunk 19: load_superheat
library(superheat)
# Chunk 20
library(RColorBrewer)
# png("../../Figures/organ.png", height = 1100, width = 850)
superheat(as.matrix(donor.matrix),
# set heatmap color map
heat.pal = brewer.pal(5, "BuPu"),
heat.na.col = "white",
# order rows in increasing order of donations
order.rows = order(organs.by.country),
# grid line colors
grid.vline.col = "white",
# right plot: HDI
yr = as.numeric(as.character(hdi.match.2014$rank)),
yr.plot.type = "bar",
yr.axis.name = "Human Development\nRanking",
yr.plot.size = 0.5,
yr.bar.col = region.col.dark,
yr.obs.col = region.col,
yr.axis.size = 14,
yr.axis.name.size = 14,
# top plot: donations by year
yt = organs.by.year,
yt.plot.type = "scatterline",
smooth.se = FALSE,
yt.axis.name = "Total number\nof transplants\nper year",
yt.axis.size = 14,
yt.axis.name.size = 14,
yt.plot.size = 0.2,
yt.point.size = 4,
yt.line.size = 2,
# left labels
left.label.size = 0.5,
left.label.text.size = 4,
left.label.col = adjustcolor(region.col, alpha.f = 0.3),
left.label.text.alignment = "right",
# bottom labels
bottom.label.size = 0.05,
bottom.label.col = "white",
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
bottom.label.text.size = 8,
# legend
legend.text.size = 18,
legend.height = 0.15,
legend.width = 1.5,
padding = 0)
# dev.off()
superheat(as.matrix(donor.matrix),
# set heatmap color map
heat.pal = brewer.pal(5, "BuPu"),
heat.na.col = "white",
# order rows in increasing order of donations
order.rows = order(organs.by.country),
# grid line colors
grid.vline.col = "white",
# right plot: HDI
yr = as.numeric(as.character(hdi.match.2014$rank)),
yr.plot.type = "bar",
yr.axis.name = "Human Development\nRanking",
yr.plot.size = 0.5,
yr.bar.col = region.col.dark,
yr.obs.col = region.col,
yr.axis.size = 14,
yr.axis.name.size = 14,
# top plot: donations by year
yt = organs.by.year,
yt.plot.type = "scatterline",
smooth.se = FALSE,
yt.axis.name = "Total number\nof transplants\nper year",
yt.axis.size = 14,
yt.axis.name.size = 14,
yt.plot.size = 0.2,
yt.point.size = 4,
yt.line.size = 2,
# left labels
left.label.size = 0.5,
left.label.text.size = 4,
left.label.col = adjustcolor(region.col, alpha.f = 0.3),
left.label.text.alignment = "right",
# bottom labels
bottom.label.size = 0.05,
bottom.label.col = "white",
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
bottom.label.text.size = 8,
# legend
legend.text.size = 18,
legend.height = 0.15,
legend.width = 1.5,
padding = 0)
png("../../Figures/organ-r.png", height = 1100, width = 850)
superheat(as.matrix(donor.matrix),
# set heatmap color map
heat.pal = brewer.pal(5, "BuPu"),
heat.na.col = "white",
# order rows in increasing order of donations
order.rows = order(organs.by.country),
# grid line colors
grid.vline.col = "white",
# right plot: HDI
yr = as.numeric(as.character(hdi.match.2014$rank)),
yr.plot.type = "bar",
yr.axis.name = "Human Development\nRanking",
yr.plot.size = 0.5,
yr.bar.col = region.col.dark,
yr.obs.col = region.col,
yr.axis.size = 14,
yr.axis.name.size = 14,
# top plot: donations by year
yt = organs.by.year,
yt.plot.type = "scatterline",
smooth.se = FALSE,
yt.axis.name = "Total number\nof transplants\nper year",
yt.axis.size = 14,
yt.axis.name.size = 14,
yt.plot.size = 0.2,
yt.point.size = 4,
yt.line.size = 2,
# left labels
left.label.size = 0.5,
left.label.text.size = 4,
left.label.col = adjustcolor(region.col, alpha.f = 0.3),
left.label.text.alignment = "right",
# bottom labels
bottom.label.size = 0.05,
bottom.label.col = "white",
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
bottom.label.text.size = 8,
# legend
legend.text.size = 18,
legend.height = 0.15,
legend.width = 1.5,
padding = 0)
dev.off()
png("../../Figures/organ-r.png", height = 1100, width = 850)
superheat(as.matrix(donor.matrix),
# set heatmap color map
heat.pal = brewer.pal(5, "BuPu"),
heat.na.col = "white",
# order rows in increasing order of donations
order.rows = order(organs.by.country),
# grid line colors
grid.vline.col = "white",
# right plot: HDI
yr = as.numeric(as.character(hdi.match.2014$rank)),
yr.plot.type = "bar",
yr.axis.name = "Human Development\nRanking",
yr.plot.size = 0.5,
yr.bar.col = region.col.dark,
yr.obs.col = region.col,
yr.axis.size = 14,
yr.axis.name.size = 14,
# top plot: donations by year
yt = organs.by.year,
yt.plot.type = "scatterline",
smooth.se = FALSE,
yt.axis.name = "Total number\nof transplants\nper year",
yt.axis.size = 14,
yt.axis.name.size = 14,
yt.plot.size = 0.2,
yt.point.size = 4,
yt.line.size = 2,
# left labels
left.label.size = 0.45,
left.label.text.size = 4,
left.label.col = adjustcolor(region.col, alpha.f = 0.3),
left.label.text.alignment = "right",
# bottom labels
bottom.label.size = 0.05,
bottom.label.col = "white",
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
bottom.label.text.size = 8,
# legend
legend.text.size = 18,
legend.height = 0.15,
legend.width = 1.5,
padding = 0)
dev.off()
setwd("~/Google Drive/Personal webpage/rlbarter.github.io/content/blog")
blogdown::serve_site()
setwd("~/Google Drive/Personal webpage/rlbarter.github.io")
blogdown::serve_site()
set.seed(1347983)
X.col <- matrix("black", ncol = ncol(mtcars), nrow = nrow(mtcars))
X.col[mtcars <= 4 ] <- "white"
superheat(mtcars[sample(1:nrow(mtcars), 10),],
# add text
X.text = round(as.matrix(mtcars[sample(1:nrow(mtcars), 10),])),
X.text.col = X.col,
# scale columns
scale = T,
# label aesthetics
left.label.size = 0.5,
bottom.label.size = 0.15,
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
bottom.label.col = "white",
# dendrogram
row.dendrogram = T,
# top plot
yt = sapply(mtcars, function(x) cor(x, mtcars$hp)),
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith\nhorsepower",
# column order
order.cols = order(sapply(mtcars, function(x) cor(x, mtcars$hp))),
# grid lines
grid.vline.col = "white",
grid.hline.col = "white")
selected.rows <- sample(1:nrow(mtcars), 10)
X.col <- matrix("black", ncol = ncol(mtcars), nrow = 10)
X.col[mtcars <= 4 ] <- "white"
superheat(mtcars[selected.rows,],
# add text
X.text = round(as.matrix(mtcars[sample(1:nrow(mtcars), 10),])),
X.text.col = X.col,
# scale columns
scale = T,
# label aesthetics
left.label.size = 0.5,
bottom.label.size = 0.15,
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
bottom.label.col = "white",
# dendrogram
row.dendrogram = T,
# top plot
yt = sapply(mtcars, function(x) cor(x, mtcars$hp)),
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith\nhorsepower",
# column order
order.cols = order(sapply(mtcars, function(x) cor(x, mtcars$hp))),
# grid lines
grid.vline.col = "white",
grid.hline.col = "white")
selected.rows <- sample(1:nrow(mtcars), 10)
X.col <- matrix("black", ncol = ncol(mtcars), nrow = 10)
X.col[mtcars <= 4 ] <- "white"
superheat(mtcars[selected.rows,],
# add text
X.text = round(as.matrix(mtcars[sample(1:nrow(mtcars), 10),])),
X.text.col = X.col,
# scale columns
scale = T,
# label aesthetics
left.label.size = 0.5,
bottom.label.size = 0.15,
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
bottom.label.col = "white",
# dendrogram
row.dendrogram = T,
# top plot
yt = sapply(mtcars, function(x) cor(x, mtcars$hp)),
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith\nhorsepower",
# column order
order.cols = order(sapply(mtcars, function(x) cor(x, mtcars$hp))),
# grid lines
grid.vline.col = "white",
grid.hline.col = "white")
X.col
set.seed(1347983)
selected.rows <- sample(1:nrow(mtcars), 10)
X.col <- matrix("black", ncol = ncol(mtcars), nrow = 10)
X.col[mtcars[selected.rows, ] <= 4] <- "white"
superheat(mtcars[selected.rows,],
# add text
X.text = round(as.matrix(mtcars[selected.rows, ])),
X.text.col = X.col,
# scale columns
scale = T,
# label aesthetics
left.label.size = 0.5,
bottom.label.size = 0.15,
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
bottom.label.col = "white",
# dendrogram
row.dendrogram = T,
# top plot
yt = sapply(mtcars, function(x) cor(x, mtcars$hp)),
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith\nhorsepower",
# column order
order.cols = order(sapply(mtcars, function(x) cor(x, mtcars$hp))),
# grid lines
grid.vline.col = "white",
grid.hline.col = "white")
X.col[mtcars[selected.rows, ] >= 4] <- "white"
superheat(mtcars[selected.rows,],
# add text
X.text = round(as.matrix(mtcars[selected.rows, ])),
X.text.col = X.col,
# scale columns
scale = T,
# label aesthetics
left.label.size = 0.5,
bottom.label.size = 0.15,
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
bottom.label.col = "white",
# dendrogram
row.dendrogram = T,
# top plot
yt = sapply(mtcars, function(x) cor(x, mtcars$hp)),
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith\nhorsepower",
# column order
order.cols = order(sapply(mtcars, function(x) cor(x, mtcars$hp))),
# grid lines
grid.vline.col = "white",
grid.hline.col = "white")
selected.rows <- sample(1:nrow(mtcars), 10)
X.col <- matrix("black", ncol = ncol(mtcars), nrow = 10)
X.col[mtcars[selected.rows, ] >= 4] <- "white"
superheat(mtcars[selected.rows,],
# add text
X.text = round(as.matrix(mtcars[selected.rows, ])),
X.text.col = X.col,
# scale columns
scale = T,
# label aesthetics
left.label.size = 0.5,
bottom.label.size = 0.15,
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
bottom.label.col = "white",
# dendrogram
row.dendrogram = T,
# top plot
yt = sapply(mtcars, function(x) cor(x, mtcars$hp)),
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith\nhorsepower",
# column order
order.cols = order(sapply(mtcars, function(x) cor(x, mtcars$hp))),
# grid lines
grid.vline.col = "white",
grid.hline.col = "white")
round(as.matrix(mtcars[selected.rows, ]))
mtcars[selected.rows,]
X.col[scale(mtcars[selected.rows, ]) < 0] <- "white"
selected.rows <- sample(1:nrow(mtcars), 10)
X.col <- matrix("black", ncol = ncol(mtcars), nrow = 10)
X.col[scale(mtcars[selected.rows, ]) < 0] <- "white"
superheat(mtcars[selected.rows,],
# add text
X.text = round(as.matrix(mtcars[selected.rows, ])),
X.text.col = X.col,
# scale columns
scale = T,
# label aesthetics
left.label.size = 0.5,
bottom.label.size = 0.15,
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
bottom.label.col = "white",
# dendrogram
row.dendrogram = T,
# top plot
yt = sapply(mtcars, function(x) cor(x, mtcars$hp)),
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith\nhorsepower",
# column order
order.cols = order(sapply(mtcars, function(x) cor(x, mtcars$hp))),
# grid lines
grid.vline.col = "white",
grid.hline.col = "white")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
