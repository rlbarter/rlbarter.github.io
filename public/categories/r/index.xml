<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Rebecca Barter</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Rebecca Barter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Jun 2017 21:13:14 -0500</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Coolors: choosing color schemes</title>
      <link>/blog/2017-06-27-colors/</link>
      <pubDate>Tue, 27 Jun 2017 21:13:14 -0500</pubDate>
      
      <guid>/blog/2017-06-27-colors/</guid>
      <description>Choosing a color palette for a visualization can be one of the most time consuming parts for perfectionists like me. It can be surprisingly difficult to decide on a palette that is both visually appealing and practical, but fortunately there do exist websites to help!
For example, Coolors shoots random, appealing, color palettes at you and you can swipe from one to the next with a hit of a space-bar.</description>
    </item>
    
    <item>
      <title>Interactive visualization in R</title>
      <link>/blog/2017-04-20-interactive/</link>
      <pubDate>Thu, 20 Apr 2017 21:13:14 -0500</pubDate>
      
      <guid>/blog/2017-04-20-interactive/</guid>
      <description>Last week I gave an SGSA seminar on interactive visualizations in R.
Here is a long-form version of the talk.
Why be interactive? Interactivity allows the viewer to engage with your data in ways impossible by static graphs. With an interactive plot, the viewer can zoom into the areas the care about, highlight the data points that are relevant to them and hide the information that isn’t.
Above all of that, making simple interactive plots are a sure-fire way to impress your coworkers!</description>
    </item>
    
    <item>
      <title>Docathon: A Week of Doumentation</title>
      <link>/blog/2017-03-7-docathon/</link>
      <pubDate>Tue, 07 Mar 2017 21:13:14 -0500</pubDate>
      
      <guid>/blog/2017-03-7-docathon/</guid>
      <description>This week is the Docathon at BIDS (a.k.a. that wonderful place that I spend all my time).
A docathon is like a hackathon but is focused on developing material and tools for documentation. We have loads of projects signed up to receive some documentation-love and an impressive number of excited participants!
We kicked off the event with a series of tutorials for writing “good” documentation. I gave an R-specific tutorial where I discussed using devtools to both develop and document your package.</description>
    </item>
    
    <item>
      <title>superheat 0.1.0</title>
      <link>/blog/2017-02-05-superheat-cran/</link>
      <pubDate>Sun, 05 Feb 2017 09:44:30 -0800</pubDate>
      
      <guid>/blog/2017-02-05-superheat-cran/</guid>
      <description>superheat 0.1.0 is now available on CRAN. Superheat makes it easy to create extendable, cutomizable, and most importantly, beautiful heatmaps. It has increased flexibility and user-friendliness when compared to alternatives such as heatmap() and pheatmap().
For usage options see the vignette and for examples see the accompanying paper by Barter and Yu (2017).
You can install the latest version with:
install.packages(&amp;quot;superheat&amp;quot;) Stay tuned for new versions with added features and minor usability tweaks.</description>
    </item>
    
    <item>
      <title>Superheat: a simple example</title>
      <link>/blog/2017-02-02-superheat-example/</link>
      <pubDate>Thu, 02 Feb 2017 09:44:30 -0800</pubDate>
      
      <guid>/blog/2017-02-02-superheat-example/</guid>
      <description>Making beautiful and customizable heatmaps just got way easier… Introducing the superheat R package!
Using superheat, it is now extremely easy to produce plots like the example below describing 10 randomly selected cars from the famous mtcars dataset.
library(superheat) set.seed(1347983) selected.rows &amp;lt;- sample(1:nrow(mtcars), 10) X.col &amp;lt;- matrix(&amp;quot;black&amp;quot;, ncol = ncol(mtcars), nrow = 10) X.col[scale(mtcars[selected.rows, ]) &amp;lt; 0] &amp;lt;- &amp;quot;white&amp;quot; superheat(mtcars[selected.rows,], # add text X.text = round(as.matrix(mtcars[selected.rows, ])), X.text.col = X.col, # scale columns scale = T, # label aesthetics left.</description>
    </item>
    
    <item>
      <title>The only reason one should ever use a pie chart</title>
      <link>/blog/2015-07-23-pie/</link>
      <pubDate>Sat, 10 Dec 2016 21:49:57 -0700</pubDate>
      
      <guid>/blog/2015-07-23-pie/</guid>
      <description>Pie charts are terrible Pie charts are notoriously terrible for data visualization. Humans are genuinely bad at comparing angles. Thus, the only reason one should ever use a pie chart is to make beautiful pie-chart-art.
par(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;), col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;), init.angle = -50, border = NA )  Figure 1: Pyramid pie chart art.</description>
    </item>
    
  </channel>
</rss>